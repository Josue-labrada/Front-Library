
/**
 *
 * @author josuedominguezlabrada
 */

package com.mycompany;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public class Biblio extends javax.swing.JFrame {
    
    /**
     * Creates new form Biblio
     */
    public Biblio() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtTitulo = new javax.swing.JLabel();
        lblLibro = new javax.swing.JLabel();
        lblAutor = new javax.swing.JLabel();
        txtAutor = new javax.swing.JTextField();
        txtlibro = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        btnAgregar = new javax.swing.JButton();
        btnInventario = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtTitulo.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        txtTitulo.setText("Biblioteca");

        lblLibro.setFont(new java.awt.Font("Arial", 2, 24)); // NOI18N
        lblLibro.setText("Libro");

        lblAutor.setFont(new java.awt.Font("Arial", 2, 24)); // NOI18N
        lblAutor.setText("Autor");

        btnAgregar.setBackground(new java.awt.Color(103, 167, 55));
        btnAgregar.setFont(new java.awt.Font("Helvetica Neue", 3, 13)); // NOI18N
        btnAgregar.setForeground(new java.awt.Color(255, 255, 255));
        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnInventario.setBackground(new java.awt.Color(221, 230, 32));
        btnInventario.setForeground(new java.awt.Color(255, 255, 255));
        btnInventario.setText("Inventario");
        btnInventario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getInventario();
            }
        });

        btnEliminar.setBackground(new java.awt.Color(216, 70, 15));
        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String titulo = txtlibro.getText();
                eliminarLibro(titulo);
            }
        });

        btnBuscar.setBackground(new java.awt.Color(15, 186, 216));
        btnBuscar.setForeground(new java.awt.Color(255, 255, 255));
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt); // Vincula el botón "Buscar" a su acción
            }
        });

        txtArea.setColumns(20);
        txtArea.setRows(5);
        txtArea.setEditable(false);
        jScrollPane1.setViewportView(txtArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(275, 275, 275)
                        .addComponent(txtTitulo))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(lblLibro)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtlibro, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(lblAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(45, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(btnInventario, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(txtTitulo)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtlibro, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAutor)
                    .addComponent(lblLibro))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnInventario, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //botones
    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {
        String titulo = txtlibro.getText();
        String autor = txtAutor.getText();
        agregarLibro(titulo, autor);
        txtlibro.setText("");
        txtAutor.setText("");
    }
    private void btnBuscarActionPerformed(ActionEvent evt) {
        String titulo = txtlibro.getText();
        buscarLibro(titulo);
        txtlibro.setText("");
        txtAutor.setText("");
    }

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {
        String id = txtlibro.getText(); // ID
        eliminarLibro(id);
        txtlibro.setText("");
        txtAutor.setText("");
    }
    
    private void btnInventarioActionPerformed(ActionEvent evt) {
        getInventario();
        txtlibro.setText("");
        txtAutor.setText("");
    }
    
    private void agregarLibro(String titulo, String autor) {
    try {
        URL url = new URL("http://localhost:8080/books");
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setDoOutput(true);
        conn.setRequestMethod("POST");
        conn.setRequestProperty("Content-Type", "application/json");

        String input = String.format("{\"title\":\"%s\",\"author\":\"%s\"}", titulo, autor);
        OutputStream os = conn.getOutputStream();
        os.write(input.getBytes());
        os.flush();

        if (conn.getResponseCode() == HttpURLConnection.HTTP_CREATED) {
            txtArea.setText("Libro agregado exitosamente.");
        } else {
            txtArea.setText("Error al agregar el libro. Código de respuesta: " + conn.getResponseCode());
        }
        conn.disconnect();
    } catch (Exception e) {
        e.printStackTrace();
        txtArea.setText("Error al conectar con el servidor.");
    }
}

    private void buscarLibro(String titulo) {
        try {
            URL url = new URL("http://localhost:8080/books/" + titulo);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            conn.setRequestProperty("Accept", "application/json");

            if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {
                BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuilder response = new StringBuilder();
                String output;
                while ((output = br.readLine()) != null) {
                    response.append(output);
                }

                // Parse JSON using Gson
                Gson gson = new Gson();
                Book[] books = gson.fromJson(response.toString(), Book[].class);

                // Format the output in a readable way
                StringBuilder formattedOutput = new StringBuilder();
                formattedOutput.append("=== Resultados de la Búsqueda ===\n");
                formattedOutput.append("Libros encontrados: ").append(books.length).append("\n\n");

                for (Book book : books) {
                    formattedOutput.append("-------------------------\n");
                    formattedOutput.append("Título: ").append(book.getTitle()).append("\n");
                    formattedOutput.append("Autor: ").append(String.join(", ", book.getAuthors())).append("\n");
                    formattedOutput.append("ISBN: ").append(book.getIsbn()).append("\n");
                    formattedOutput.append("ISBN-13: ").append(book.getIsbn13()).append("\n");
                    formattedOutput.append("Idioma: ").append(book.getLanguageCode()).append("\n");
                    formattedOutput.append("Páginas: ").append(book.getNumPages()).append("\n");
                    formattedOutput.append("Calificación promedio: ").append(book.getAverageRating()).append("/5.0\n");
                    formattedOutput.append("Número de calificaciones: ").append(book.getRatingsCount()).append("\n");
                    formattedOutput.append("-------------------------\n");
                }

                txtArea.setText(formattedOutput.toString());
            } else {
                txtArea.setText("Error al obtener el inventario.");
            }
            conn.disconnect();
        } catch (Exception e) {
            e.printStackTrace();
            txtArea.setText("Error al conectar con el servidor.");
        }
    }

    private void eliminarLibro(String id) {
        try {
            URL url = new URL("http://localhost:8080/books/" + id); // Asegúrate de usar el ID aquí
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("DELETE");

            if (conn.getResponseCode() == HttpURLConnection.HTTP_NO_CONTENT) {
                txtArea.setText("Libro eliminado exitosamente.");
            } else if (conn.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {
                txtArea.setText("Libro no encontrado.");
            } else {
                txtArea.setText("Error al eliminar el libro. Código de respuesta: " + conn.getResponseCode());
            }
            conn.disconnect();
        } catch (Exception e) {
            e.printStackTrace();
            txtArea.setText("Error al conectar con el servidor.");
        }
    }

    private void getInventario() {
        try {
            URL url = new URL("http://localhost:8080/books");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            conn.setRequestProperty("Accept", "application/json");

            if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {
                BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuilder response = new StringBuilder();
                String output;
                while ((output = br.readLine()) != null) {
                    response.append(output);
                }

                // Parse JSON using Gson
                Gson gson = new Gson();
                Book[] books = gson.fromJson(response.toString(), Book[].class);

                // Format the output in a readable way
                StringBuilder formattedOutput = new StringBuilder();
                formattedOutput.append("=== Inventario de Libros ===\n");
                formattedOutput.append("Total de libros: ").append(books.length).append("\n\n");

                for (Book book : books) {
                    formattedOutput.append("-------------------------\n");
                    formattedOutput.append("Título: ").append(book.getTitle() != null ? book.getTitle() : "N/A").append("\n");

                    // Handle authors array safely
                    String authorStr = "N/A";
                    if (book.getAuthors() != null && book.getAuthors().length > 0) {
                        authorStr = String.join(", ", book.getAuthors());
                    }
                    formattedOutput.append("Autor: ").append(authorStr).append("\n");

                    // Handle other fields safely
                    formattedOutput.append("ISBN: ").append(book.getIsbn() != null ? book.getIsbn() : "N/A").append("\n");
                    formattedOutput.append("ISBN-13: ").append(book.getIsbn13() != null ? book.getIsbn13() : "N/A").append("\n");
                    formattedOutput.append("Idioma: ").append(book.getLanguageCode() != null ? book.getLanguageCode() : "N/A").append("\n");
                    formattedOutput.append("Páginas: ").append(book.getNumPages()).append("\n");
                    formattedOutput.append("Calificación promedio: ").append(book.getAverageRating()).append("/5.0\n");
                    formattedOutput.append("Número de calificaciones: ").append(book.getRatingsCount()).append("\n");
                    formattedOutput.append("-------------------------\n");
                }

                txtArea.setText(formattedOutput.toString());
            } else {
                txtArea.setText("Error al obtener el inventario.");
            }
            conn.disconnect();
        } catch (Exception e) {
            e.printStackTrace();
            txtArea.setText("Error al conectar con el servidor: " + e.getMessage());
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //Funciona para poner color en mac
        try {
        javax.swing.UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
    } catch (Exception e) {
        e.printStackTrace();
    }

        java.awt.EventQueue.invokeLater(new Runnable(){
        public void run() {
        new Biblio().setVisible(true);
        }
    });
   
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnInventario;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblAutor;
    private javax.swing.JLabel lblLibro;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txtAutor;
    private javax.swing.JLabel txtTitulo;
    private javax.swing.JTextField txtlibro;
    // End of variables declaration//GEN-END:variables



}
